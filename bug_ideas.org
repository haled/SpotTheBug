* Why does this matter?
** many current constructs exist to prevent some of these bugs
** These constructs "obscure" the reason behind their existence (i.e. the using statement)
** This can be a fun exercise to highlight design principles
** Fun way to talk about code smells or bad code that crept into a code base
* Bugs to highlight with code
** Bugs
*** [X] Database connections opened and closed in different places
*** [X] File handles opened and closed in different places
*** [X] Nested FOR loops crossing the indexes in multidimensional arrays
*** [X] pulling list of files to work and then deleting with wildcards
** Performance land mines
*** [X] not disposing of objects properly
**** May be able to use DB connections or file handle code
*** [X] Possibly creating too many string instances (this is more of a performance issue)
*** [ ] Async code that isn't actually async
** Design flaws
*** [X] creating objects inside non-factory methods

*** [X] spreading one responsibility over many objects
**** This is shown with extra code in ObjectCreation.cs
*** [X] including too many responsibilities in a single object
* 
