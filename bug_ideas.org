* Why does this matter?
** many current constructs exist to prevent some of these bugs
** These constructs "obscure" the reason behind their existence (i.e. the using statement)
** This can be a fun exercise to highlight design principles
** Fun way to talk about code smells or bad code that crept into a code base
* Bugs to highlight with code
** [X] Database connections opened and closed in different places
** [ ] File handles opened and closed in different places
** [ ] not disposing of objects properly (may be covered in the two above)
** [ ] Nested FOR loops crossing the indexes in multidimensional arrays
** [ ] creating objects inside non-factory methods
** [ ] Async code that isn't actually async
** [X] pulling list of files to work and then deleting with wildcards
** [ ] Possibly creating too many string instances (this is more of a performance issue)
** [ ] spreading one responsibility over many objects
** [ ] including too many responsibilities in a single object
* 
